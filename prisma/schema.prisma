// This is your Prisma schema file,
// learn more about it in the docs https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id        String     @id @default(uuid())
  name      String
  username  String
  email     String @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  phone     String
  website   String
  address   Address @relation(fields: [addressId], references: [id])
  addressId Int     @unique // Foreign key

}

model Address {
  id       Int    @id @default(autoincrement())
  street   String
  suite    String
  city     String
  zipcode  String
  geo      Geo    @relation(fields: [geoId], references: [id])
  geoId    Int    @unique// Foreign key
  user     User?
}

model Geo {
  id  Int    @id @default(autoincrement())
  lat String
  lng String
  address Address?
}

model Order {
 id  Int    @id @default(autoincrement())
  shipmentId           String    @unique @default(uuid())
  customer          User @relation(fields: [customerId], references: [id])
  customerId           String
  orderDate            DateTime @default(now())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  customerName         String
  status          OrderStatus  @default(PENDING)
  address              String
  estimatedDelivery    String
  items                OrderItem[]
  warehouseLocation    Location @relation("WarehouseLocation", fields: [warehouseLocationId], references: [id])
  warehouseLocationId  Int
  orderLocation        Location @relation("OrderLocation", fields: [orderLocationId], references: [id])
  orderLocationId      Int
  destinationLocation  Location @relation("DestinationLocation", fields: [destinationLocationId], references: [id])
  destinationLocationId Int

  Delivery Delivery[]
}

model OrderItem {
  id         Int     @id @default(autoincrement())
  name       String
  delivery   Order @relation(fields: [deliveryId], references: [id])
  deliveryId Int
}

model Location {
  id      Int     @id @default(autoincrement())
  lat     Float
  lng     Float

  warehouseFor   Order[] @relation("WarehouseLocation")
  orderFor       Order[] @relation("OrderLocation")
  destinationFor Order[] @relation("DestinationLocation")
}

model Delivery {
  id                String          @id @default(uuid())
  orderId           String          @unique
  order             Order           @relation(fields: [orderId], references: [shipmentId])
  deliveryPersonId  String?
  // deliveryPerson    User?           @relation(fields: [deliveryPersonId], references: [id])
  status            DeliveryStatus  @default(PENDING)
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  trackingNumber    String          @unique
  notes             String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  trackingHistory   TrackingEvent[]
}

model TrackingEvent {
  id          String        @id @default(uuid())
  deliveryId  String
  delivery    Delivery      @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  status      DeliveryStatus
  location    String?
  notes       String?
  timestamp   DateTime      @default(now())
}


enum Role {
  ADMIN
  CUSTOMER
  DELIVERY_PERSON
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum DeliveryStatus {
  PENDING
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
}